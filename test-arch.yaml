apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: fantastic-whale-25
  namespace: argo
  labels:
    example: "true"
spec:
  arguments:
    parameters:
      - name: arch
        value: amd64
      - name: repo
        value: https://github.com/BMelone/ArchDemo
      - name: branch
        value: main
  entrypoint: main
  volumeClaimTemplates:
    - metadata:
        name: work10-amd64
      spec:
        accessModes: [ "ReadWriteMany" ]
        resources:
          requests:
            storage: 64Mi
    - metadata:
        name: work10-arm64
      spec:
        accessModes: [ "ReadWriteMany" ]
        resources:
          requests:
            storage: 64Mi
  templates:
    - name: main
      dag:
        tasks:
          - name: test-arch
            template: test-arch
            arguments:
              parameters:
                - name: arch
                  value: "{{workflow.parameters.arch}}"
          - name: clone-amd
            template: clone
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
                - name: arch
                  value: amd64
            depends: "test-arch"
          - name: clone-arm
            template: clone
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
                - name: arch
                  value: arm64
            depends: "test-arch"
          - name: image-build-arm
            template: image-build
            arguments:
              parameters:
                - name: arch
                  value: arm64
            depends: "clone-arm"
          - name: image-build-amd
            template: image-build
            arguments:
              parameters:
                - name: arch
                  value: amd64
            depends: "clone-amd"
    - name: test-arch
      nodeSelector:
        kubernetes.io/arch: "{{workflow.parameters.arch}}"
      container:
        name: main
        image: ubuntu
        command:
          - uname
        args:
          - -m
    - name: clone
      nodeSelector:
        kubernetes.io/arch: "{{inputs.parameters.arch}}"
      inputs:
        parameters:
          - name: repo
          - name: branch
          - name: arch
      container:
        volumeMounts:
          - mountPath: /work10-{{inputs.parameters.arch}}
            name: work10-{{inputs.parameters.arch}}
        image: alpine/git:v2.26.2
        workingDir: /work10-{{inputs.parameters.arch}}
        # Do a shallow clone, which is the fastest way to clone, by using the
        # --depth, --branch, and --single-branch options
        args:
          - clone
          - --depth
          - "1"
          - --branch
          - "{{inputs.parameters.branch}}"
          - --single-branch
          - "{{inputs.parameters.repo}}"
          - .
    - name: image-build
      inputs:
        parameters:
          - name: arch
      nodeSelector:
        kubernetes.io/arch: "{{inputs.parameters.arch}}"
      container:
        readinessProbe:
          exec:
            command: [ sh, -c, "buildctl debug workers" ]
        image: moby/buildkit:v0.9.3-rootless
        volumeMounts:
          - name: work10-{{inputs.parameters.arch}}
            mountPath: /work10-{{inputs.parameters.arch}}
        workingDir: /work10-{{inputs.parameters.arch}}
        env:
          - name: BUILDKITD_FLAGS
            value: --oci-worker-no-process-sandbox
        command:
          - buildctl-daemonless.sh
        args:
          - build
          - --frontend
          - dockerfile.v0
          - --local
          - context=.
          - --local
          - dockerfile=.
          - --output
          - type=image,name=ttl.sh/ben-multi-arch-image:{{inputs.parameters.arch}},push=true
  ttlStrategy:
    secondsAfterCompletion: 300
  podGC:
    strategy: OnPodCompletion
